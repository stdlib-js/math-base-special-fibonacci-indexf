{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnanf from '@stdlib/math-base-assert-is-nanf';\nimport isIntegerf from '@stdlib/math-base-assert-is-integerf';\nimport lnf from '@stdlib/math-base-special-lnf';\nimport roundf from '@stdlib/math-base-special-roundf';\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\nimport PHI from '@stdlib/constants-float32-phi';\nimport PINF from '@stdlib/constants-float32-pinf';\n\n\n// VARIABLES //\n\nvar ONE_HALF = float64ToFloat32( 0.5 );\nvar SQRT_5 = float64ToFloat32( 2.23606797749979 );\nvar LN_PHI = lnf( PHI );\n\n\n// MAIN //\n\n/**\n* Computes the Fibonacci number index of a single-precision floating-point number.\n*\n* ## Notes\n*\n* -   We use `roundf` instead of `floorf` due to errors introduced by floating-point precision.\n*\n* @param {NonNegativeInteger} F - Fibonacci number\n* @returns {NonNegativeInteger} Fibonacci number index\n*\n* @example\n* var n = fibonacciIndexf( 0 );\n* // returns NaN\n*\n* @example\n* var n = fibonacciIndexf( 1 );\n* // returns NaN\n*\n* @example\n* var n = fibonacciIndexf( 2 );\n* // returns 3\n*\n* @example\n* var n = fibonacciIndexf( 3 );\n* // returns 4\n*\n* @example\n* var n = fibonacciIndexf( 5 );\n* // returns 5\n*\n* @example\n* var n = fibonacciIndexf( 8 );\n* // returns 6\n*\n* @example\n* var n = fibonacciIndexf( NaN );\n* // returns NaN\n*\n* @example\n* var n = fibonacciIndexf( 3.14 );\n* // returns NaN\n*\n* @example\n* var n = fibonacciIndexf( -1 );\n* // returns NaN\n*/\nfunction fibonacciIndexf( F ) {\n\tvar x;\n\tif (\n\t\tisnanf( F ) ||\n\t\tisIntegerf( F ) === false ||\n\t\tF <= 1 ||\n\t\tF === PINF\n\t) {\n\t\treturn NaN;\n\t}\n\tx = float64ToFloat32( float64ToFloat32( F*SQRT_5 ) + ONE_HALF );\n\treturn roundf( float64ToFloat32( lnf( x ) / LN_PHI ) );\n}\n\n\n// EXPORTS //\n\nexport default fibonacciIndexf;\n"],"names":["ONE_HALF","float64ToFloat32","SQRT_5","LN_PHI","lnf","PHI","fibonacciIndexf","F","x","isnanf","isIntegerf","PINF","NaN","roundf"],"mappings":";;yqBAiCA,IAAIA,EAAWC,EAAkB,IAC7BC,EAASD,EAAkB,kBAC3BE,EAASC,EAAKC,GAmDlB,SAASC,EAAiBC,GACzB,IAAIC,EACJ,OACCC,EAAQF,KACY,IAApBG,EAAYH,IACZA,GAAK,GACLA,IAAMI,EAECC,KAERJ,EAAIP,EAAkBA,EAAkBM,EAAEL,GAAWF,GAC9Ca,EAAQZ,EAAkBG,EAAKI,GAAML,IAC7C"}